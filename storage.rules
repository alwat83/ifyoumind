rules_version = '2';

// Firebase Storage Security Rules for ifyoumind.com
service firebase.storage {
  match /b/{bucket}/o {
    
    // Profile pictures storage rules
    match /profile-pictures/{userId}/{fileName} {
      // Allow authenticated users to read their own and others' profile pictures (public avatars)
      allow read: if request.auth != null;
      // Allow write if:
      //  - Authenticated and uploading to their own folder
      //  - AND either this is the actual create/update with metadata present that passes validation
      //    OR it's a CORS preflight (OPTIONS) / request without request.resource metadata.
      allow write: if request.auth != null
        && request.auth.uid == userId
        && (
          request.resource == null // CORS preflight often lacks metadata; don't block it
          || isValidProfilePicture(request.resource)
        );
    }
    // Disallow listing entire profile-pictures folder (defense-in-depth)
    match /profile-pictures/{userId}/{wildcard=**} {
      allow list: if false;
    }
    
    // Future: Idea attachments and other file uploads
    match /idea-attachments/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && isValidAttachment(request.resource);
    }
    
    // Future: Idea images and media
    match /idea-media/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && isValidMediaFile(request.resource);
    }
  }
}

// Helper functions for file validation
function isValidProfilePicture(resource) {
  return resource.size < 5 * 1024 * 1024  // 5MB limit
    && resource.contentType in ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
}

function isValidAttachment(resource) {
  return resource.size < 10 * 1024 * 1024  // 10MB limit
    && resource.contentType.matches('(image|application|text)/.*');
}

function isValidMediaFile(resource) {
  return resource.size < 20 * 1024 * 1024  // 20MB limit
    && resource.contentType.matches('(image|video|audio)/.*');
}




